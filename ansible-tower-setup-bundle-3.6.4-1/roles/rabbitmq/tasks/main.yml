---

- name: check whether rabbitmq is already reachable as a node
  command: rabbitmqctl -n rabbitmq@{{ rabbitmq_env_host }} status
  register: rabbitmq_check
  ignore_errors: true
  changed_when: false

- name: stop the rabbitmq service before updating the nodename
  service: name=rabbitmq-server state=stopped

- name: Disable all RabbitMQ plugins before upgrade
  file:
    path: /etc/rabbitmq/enabled_plugins
    state: absent

- name: Reset RabbitMQ database
  file:
    path: /var/lib/rabbitmq/mnesia
    state: absent

- name: SSL configuration
  when: "rabbitmq_use_ssl|default(False)|bool"
  block:

    - name: Create the SSL CA on the first Tower host
      when: inventory_hostname == groups['tower'][0]
      block:

        - name: Generate CA private key
          openssl_privatekey:
            path: '/etc/rabbitmq/ca.key'
            owner: root
            group: root
            mode: "0600"

        - name: Slurp CA private key
          slurp:
            src: '/etc/rabbitmq/ca.key'
          register: rmq_ca_key
          no_log: True

        - name: Generate CA CSR
          openssl_csr:
            path: '/etc/rabbitmq/ca.csr'
            privatekey_path: '/etc/rabbitmq/ca.key'
            common_name: 'rabbitmq-ca'
            basic_constraints: 'CA:TRUE'
            owner: root
            group: root
            mode: "0600"

        - name: Generate CA certificate
          openssl_certificate:
            path: '/etc/rabbitmq/ca.crt'
            csr_path: '/etc/rabbitmq/ca.csr'
            privatekey_path: '/etc/rabbitmq/ca.key'
            provider: selfsigned
            selfsigned_not_after: "+36524d"
            owner: root
            group: root
            mode: "0644"

        - name: Slurp CA certificate
          slurp:
            src: '/etc/rabbitmq/ca.crt'
          register: rmq_ca_crt
          no_log: True

    - name: Copy the SSL CA to the other hosts
      when: inventory_hostname != groups['tower'][0]
      block:

        - name: Place the CA key
          copy:
            content: "{{ hostvars[groups['tower'][0]]['rmq_ca_key']['content'] | b64decode }}"
            dest: "/etc/rabbitmq/ca.key"
            owner: root
            group: root
            mode: "0600"

        - name: Place the CA certificate
          copy:
            content: "{{ hostvars[groups['tower'][0]]['rmq_ca_crt']['content'] | b64decode }}"
            dest: "/etc/rabbitmq/ca.crt"
            owner: root
            group: root
            mode: "0600"

    - name: Generate server private key
      openssl_privatekey:
        path: '/etc/rabbitmq/server.key'
        owner: root
        group: root
        mode: "0600"

    - name: Generate server CSR
      openssl_csr:
        path: '/etc/rabbitmq/server.csr'
        privatekey_path: '/etc/rabbitmq/server.key'
        common_name: '{{ rabbitmq_env_host }}'
        owner: root
        group: root
        mode: "0600"

    - name: Generate server certificate
      openssl_certificate:
        path: "/etc/rabbitmq/server.crt"
        csr_path: "/etc/rabbitmq/server.csr"
        privatekey_path: "/etc/rabbitmq/server.key"
        provider: ownca
        ownca_path: "/etc/rabbitmq/ca.crt"
        ownca_privatekey_path: "/etc/rabbitmq/ca.key"
        ownca_not_after: "+36500d"
        owner: root
        group: root
        mode: "0644"

    - name: Combine server cert+key into a single file
      assemble:
        src: "/etc/rabbitmq"
        regexp: "server.crt|server.key"
        dest: "/etc/rabbitmq/rmq-ssl.pem"
        mode: "0600"
        owner: rabbitmq
        group: rabbitmq

- name: Apply RabbitMQ environment Node Name
  template:
    dest: /etc/rabbitmq/rabbitmq-env.conf
    force: yes
    src: rabbitmq-env.conf.j2
    mode: '0600'
    owner: 'rabbitmq'
    group: 'rabbitmq'

- name: Apply RabbitMQ Configuration
  template:
    dest: /etc/rabbitmq/rabbitmq.conf
    force: yes
    src: rabbitmq.conf.j2
    mode: '0600'
    owner: 'rabbitmq'
    group: 'rabbitmq'

- name: Apply RabbitMQ Cookie
  template:
    dest: /var/lib/rabbitmq/.erlang.cookie
    force: yes
    src: erlang.cookie.j2
    mode: '0600'
    owner: 'rabbitmq'
    group: 'rabbitmq'

- name: start and enable the rabbitmq service
  service:
    name: rabbitmq-server
    state: started
    enabled: yes

- name: wait for rabbitmq service to be running
  wait_for:
    port: "{{ rabbitmq_port|default(5672) }}"

- name: Activate rabbitmq plugins
  rabbitmq_plugin:
    names: rabbitmq_management,rabbitmq_management_agent,rabbitmq_federation,rabbitmq_federation_management
    state: enabled

- name: create the rabbitmq vhost
  rabbitmq_vhost:
    name: "{{ rabbitmq_vhost|default('tower') }}"
    state: present
    node: "rabbitmq@{{ rabbitmq_env_host }}"

- name: Set Cluster HA Policy
  shell: "rabbitmqctl set_policy ha-all \".*\" '{\"ha-mode\":\"all\", \"ha-sync-mode\":\"automatic\"}' -p {{ rabbitmq_vhost|default('tower') }}"
  when: inventory_hostname == groups['tower'][0]

- name: Stop rabbitmq app if we arent the first node
  shell: rabbitmqctl stop_app
  when: inventory_hostname != groups['tower'][0]

- name: Set Primary RabbitMQ hostname
  set_fact:
    rabbitmq_real_host: "{{ rabbitmq_env_host }}"

- name: Cluster all nodes to the first node
  shell: "rabbitmqctl join_cluster rabbitmq@{{ hostvars[groups['tower'][0]].rabbitmq_real_host }}"
  when: inventory_hostname != groups['tower'][0]

- name: Start rabbitmq app if we arent the first node
  shell: rabbitmqctl start_app
  when: inventory_hostname != groups['tower'][0]

- name: create the rabbitmq user
  rabbitmq_user:
    user: "{{ rabbitmq_username }}"
    password: "{{ rabbitmq_password }}"
    tags: "administrator,management"
    vhost: "{{ rabbitmq_vhost|default('tower') }}"
    configure_priv: .*
    read_priv: .*
    write_priv: .*
    state: present
    force: yes
    node: "rabbitmq@{{ rabbitmq_env_host }}"
  when: inventory_hostname == groups['tower'][0]

- name: Remove default guest user
  shell: "rabbitmqctl delete_user guest"
  when: inventory_hostname == groups['tower'][0]
